/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2019-06-17

The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "Accelerometer.h"
#include "Gyro.h"
#include "RegisterAddresses.h"

// Init no Acelerômetro (I2C) e no Giroscópio (SPI)
// Receber os dados do Giroscópio e passar o eixo atual para o eixo XYZ padrão para poder saber qual o valor da aceleração sem a gravidade
// Salvar o valor da aceleração da gravidade no instante ao salvar só o valor do eixo z
// Com os valores da aceleração teria que fazer a integral para achar a velocidade , ou sabendo que o movimento do mêtro é partir do repouso com uma aceleração progressiva
// e depois um aceleração retardada, entao poderia fazer um algoritmo para ver quando muda o sinal da aceleração e quando realmente parar.
// Sabendo o ponto inicial e o final, sabemos o número de paradas e temos um tempo médio entre as estações e o tempo médio que o trem fica parado em uma estação.

#define  Tp = a // Tempo parado médio

int main()
{
	GyroInit();
	AccelerometerInit();

	int Counter0 = 0;
	int N; //Número de Estações
	int Counter1 = 0;

	short accelX, accelY, accelZ;
	GetAccelerometerValues(&accelX, &accelY, &accelZ);

	short gyroX, gyroY, gyroZ;
	GetGyroValues(&gyroX, &gyroY, &gyroZ);

	short G = accelZ; //Salvei o valor da aceleração da gravidade em G

	GetAccelerometerValues(&accelX, &accelY, &accelZ);

	while (Counter0 != N)
	{
		while ( accelX == 0 && accelY == 0 )
		{
			Counter1++;
			if (Counter1*f >= Tp) Multiplica por um fator para dar o tempo que levou
				Counter0++;
		}
	}

	//Avisa ao usuário
}

